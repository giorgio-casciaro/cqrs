'use strict';

var R = require('ramda');
var path = require('path');

var fs = require('fs');
var PACKAGE = 'mutations.cqrs';
var checkRequired = require('./utils').checkRequired;
var checkRequiredFiles = require('./utils').checkRequiredFiles;
var uuidV4 = require('uuid/v4');
var getConsole = function getConsole(serviceName, serviceId, pack) {
  return require('./utils').getConsole({ error: true, debug: true, log: true, warn: true }, serviceName, serviceId, pack);
};

function getMutationsFunctions(basePath) {
  var filesJsNoExtension = R.map(R.compose(R.replace('.js', ''), path.basename), R.filter(function (file) {
    return path.extname(file) === '.js';
  }, fs.readdirSync(basePath)));
  var splitFiles = R.map(R.split('.'));
  var sortFiles = R.compose(R.reverse, R.sortBy(R.compose(parseInt, R.prop(0))));
  var groupFiles = R.groupBy(R.prop(0));
  var addFunction = R.map(R.map(function (element) {
    return { mutationId: element[0], mutationVersion: element[1] };
  }));
  var mutationsFunctions = R.compose(addFunction, groupFiles, sortFiles, splitFiles)(filesJsNoExtension);
  // debug('getMutationsFunctions', mutationsFunctions)
  return mutationsFunctions;
}

function checkMutationFunction(mutationId, mutationsFunctions) {
  if (!mutationsFunctions[mutationId] || !mutationsFunctions[mutationId][0]) {
    errorThrow('mutation not defined', { mutationId: mutationId });
  }
}

function generateId() {
  return uuidV4();
}
module.exports = function getMutationsCqrsPackage(_ref) {
  var _ref$serviceName = _ref.serviceName,
      serviceName = _ref$serviceName === undefined ? 'unknow' : _ref$serviceName,
      _ref$serviceId = _ref.serviceId,
      serviceId = _ref$serviceId === undefined ? 'unknow' : _ref$serviceId,
      mutationsPath = _ref.mutationsPath;

  var CONSOLE = getConsole(serviceName, serviceId, PACKAGE);
  var errorThrow = require('./utils').errorThrow(serviceName, serviceId, PACKAGE);

  var applyMutationsFromPath = function applyMutationsFromPathFunc(originalState, mutations, mutationsPath) {
    var state = R.clone(originalState);
    CONSOLE.debug('applyMutationsFromPath', { state: state, mutations: mutations, mutationsPath: mutationsPath });
    function applyMutation(state, mutation) {
      var mutationFile = path.join(mutationsPath, mutation.mutation + '.' + mutation.version + '.js');
      CONSOLE.debug('applyMutation', { mutationFile: mutationFile, state: state, data: mutation.data });
      return require(mutationFile)(state, mutation.data);
    }
    return R.reduce(applyMutation, state, mutations);
  };

  try {
    checkRequired({ mutationsPath: mutationsPath }, PACKAGE);
    checkRequiredFiles([mutationsPath], PACKAGE);
    return {
      mutate: function mutate(_ref2) {
        var mutation = _ref2.mutation,
            objId = _ref2.objId,
            data = _ref2.data,
            meta = _ref2.meta;

        try {
          checkRequired({ objId: objId, mutation: mutation }, PACKAGE);
          var mutationsFunctions = getMutationsFunctions(mutationsPath);
          checkMutationFunction(mutation, mutationsFunctions);
          var lastMutationVersion = mutationsFunctions[mutation][0].mutationVersion;
          var mutationState = {
            objId: objId,
            _id: generateId(),
            mutation: mutation,
            meta: meta,
            version: lastMutationVersion,
            timestamp: new Date().getTime(),
            data: data
          };
          CONSOLE.debug('dataSingleMutation to create', { mutation: mutation, lastMutationVersion: lastMutationVersion, objId: objId, data: data, mutationState: mutationState });
          return mutationState;
        } catch (error) {
          errorThrow('mutate(args) Error', { error: error, mutation: mutation, objId: objId, data: data });
        }
      },
      applyMutations: function applyMutations(state, mutations) {
        CONSOLE.debug('applyMutationsFromPath', { state: state, mutations: mutations, mutationsPath: mutationsPath });
        return applyMutationsFromPath(state, mutations, mutationsPath);
      }
    };
  } catch (error) {
    errorThrow('getMutationsCqrsPackage', { error: error, mutationsPath: mutationsPath });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,